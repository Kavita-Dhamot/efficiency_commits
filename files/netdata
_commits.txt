commit 31675045e99975fc2599d13b92a93269e7983743
Author: Austin S. Hemmelgarn <austin@netdata.cloud>
Date:   Mon Feb 3 07:30:13 2020 -0500

    Assorted cleanup items in the RPM spec file. (#7927)
    
    * Add explicit creation of log and cache directories to specfile.
    
    This eliminates a RPM build error seen on multiple OSes with recent
    versions of rpmbuild.
    
    * Change build dependency for RPMs fron `git` to `git-core`.
    
    We don't actually need everything the regular `git` package pulls in,
    just the `git` command and a handful of built-in sub-commands, so we can
    just depend on `git-core` during the build instead of the full package.
    
    This causes no issues for existing build workflows, as `git` pulls in
    `git-core`. However, it will allow us to make the new Docker-based
    package building workflow a bit more efficient as we can decrease the
    size of the package builder images.
    
    * Remove useless build dependency on netcat in specfile.
    
    We don't actually use netcat anywhere during the build process, so
    there's no point in depending on it for the build.
    
    * Update RPM specfile changelog.

commit 118534bd8b6c900c6b72144aedc253deeff7f06b
Author: Markos Fountoulakis <44345837+mfundul@users.noreply.github.com>
Date:   Tue Jun 4 18:20:38 2019 +0300

    Fill chart gaps efficiently. (#6216)

commit fe70512347fabdf662d69ba19796eb2457d22a9d
Author: George Moschovitis <george.moschovitis@gmail.com>
Date:   Tue Dec 11 10:29:16 2018 +0200

    Introduced IEC-compliant unit abbreviations #4711 (#4912)
    
    * Introduced IEC-compliant unit abbreviations #4711
    
    * Generated dashboard.js
    
    * Reverted the old abbreviations to a x1000 coefficient
    
    * Reverted coefficients

commit f857aa35aed99b97b9b123e35544cf94260b108d
Author: Costa Tsaousis <costa@tsaousis.gr>
Date:   Wed Oct 24 03:03:57 2018 +0300

    optimized ses and added des (#4470)
    
    * optimized ses and added des
    
    * added coefficient of variation
    
    * fix bug identified by @vlvkobal: use all available points when resampling is required and the timeframe is not enough for a single point

commit 6b268974797817286541235ee94175383c5d51b2
Author: VPNable <admin@vpnable.com>
Date:   Mon May 21 14:45:09 2018 +0200

    update very inefficient regex (thanks to @l2isbad in #3734)

commit 4b0a7d8c496c074f7342343c31a822a01213c2f5
Author: Austin S. Hemmelgarn <ahferroin7@gmail.com>
Date:   Fri Apr 27 14:21:11 2018 -0400

    Add a plugin for Spigot Minecraft server stats.
    
    THis adds a plugin which tracks rudimentary stats from a Spigot
    Minecraft server using the remote console protocol.  It provides charts
    for the number of currently connected users, as well as the number of
    ticks the server is processing each second (which correlates strongly
    with server-side lag).
    
    The plugin makes use of a Python implementation of the remote console
    protocol originally written by Barnaby Gale and released under an MIT
    license.  This bundles the module with netdata as it's tiny (less than
    100 lines of code) and is not packaged in any distributions I know of.
    
    The default settings are to connect to the local system on the standard
    remote console port (25575) without a password, which allows for trivial
    setup (users just need to set `enable-rcon` to true in the
    server.properties file for their Spigot server).
    
    Currently, this plugin uses the SimpleService framework instead of the
    SocketService plugin, which actually makes implementation marginally
    simpler.  In theory, it could probably be re-implemented using the
    SocketService, but I very much doubt it would be any more efficient than
    it is now (we already keep the socket open and connected persistently so
    we don't have to re-authenticate, and we make the protocol synchronous
    so it's trivial to determine that we've recieved everything because a
    read returns no new data).

commit 2377959d99ccda5e7f6ccf02536276ff1e615ad4
Author: Costa Tsaousis <costa@tsaousis.gr>
Date:   Fri May 13 22:00:39 2016 +0300

    converted appconfig rwlock to the more efficient mutex, since it uses it only for write locking
commit d49e6b50ba4a9ff2237685345acf3ded0dbe7a74
Author: Austin S. Hemmelgarn <austin@netdata.cloud>
Date:   Mon Mar 9 11:15:46 2020 -0400

    Added various fixes and improvements to the installers. (#8315)
    
    * Don't rotate old Netdata config dirs in static installer.
    
    This should have been removed when we stopped shipping stock configs in
    `/etc/netdata`.
    
    * Use a single invocation of the package manager to install dependencies.
    
    This slightly improves the efficiency of the code in question, and also
    eliminates a few dozen potential cases of prompting the user if they
    want to install specific packages.
    
    * Add correct package name for ulogd on arch.
    
    * Properly finish conversion to Python 3 defaults.

commit 8bf966d6e06281e03333742c5d650bfe60b51ded
Author: Vilkov Adel <vilkov.adel@gmail.com>
Date:   Mon Aug 12 11:01:09 2019 +0300

    (re-open) ZRAM info collector module (proc.plugin) (#6424)
    
    * ZRAM collector module
    ZRAM: Implemented zram device id detection
    
    ZRAM: Implemented zram device enumeration
    
    WIP ZRAM: Memory usage graph (needs other graphs)
    
    ZRAM: Added ratio and efficiency graph
    
    ZRAM: Added chart description and context names, code formatting
    
    * ZRAM: Proper handling of zram device removal
    
    * ZRAM: Added additional checks, removed redundant logging

commit 56ac9f514566d0cbfa6125a28c96b759d4de1ff9
Author: Chris Akritidis <43294513+cakrit@users.noreply.github.com>
Date:   Mon Mar 4 18:36:08 2019 +0100

    Support legacy Prometheus metric names for source average (#5531)
    
    * Support older prometheus metric unit naming and allow removal of units from metrics
    
    * Update swagger
    
    * Added bats tests, improved efficiency of checking units

commit fa854bdde6a67c49f4cba980dd936441af5fb8f9
Author: Austin S. Hemmelgarn <ahferroin7@gmail.com>
Date:   Wed Nov 28 15:54:30 2018 -0500

    Generalize the recipient finding logic and reduce the boilerplate code. (#3960)
    
    * Generalize the recipient finding logic and reduce the boilerplate code.
    
    This generalizes the recipient finding logic in alarm-notify.sh by
    converting it to utilize computed variable names in a loop instead of
    having it all serialized.  It also handles declaration of the `SEND_*`,
    `DEFAULT_RECIPIENT_*`, and `role_recipients_*` variables in a similar
    manner.
    
    Overall, this significantly reduces the amount of boilerplate code
    needed to add a new notification method.  By just adding the variable
    tag (in lowercase) to the `method_names` variable near the top, you
    get automatic declarations of the above mentioned variables and are
    automatically hooked into the recipient finding logic.
    
    There are two oddities that this has had to work around:
    
      * Kafka:  The kafka notification support does not do anything with
    recipients.  I know nothing about Kafka myself, so I'm just leaving this
    alone.  Because it doesn't want the whole recipient handling, it's
    explicitly left out of the `method_names` variable, and the `SEND_KAFKA`
    variable is explicitly declared.
    
      * EMail:  The email handling has two peculiarities to it:
        - There is a default value for `DEFAULT_RECIPIENT_EMAIL` explicitly
        defined in alarm-notify.sh.  We just declare the variable in the
        nromal loop, and then assign it down with the other email related
        config variables.
        - Recipient names need to be separated by a comma and a space, not
        just a space like everything else wants.  This is achieved by some
        creative usage of the `cut` command and the `$IFS` variable.
        Ideally, this wouldn't be needed, but spaces in email addresses are
        valid (as stupid as that fact is), so we have to account for that.
    
    * Address code comments by @ktsaou.
    
    * Improve the efficiency of the recipient finding loop.
    
    This relocates the loop that finds recipients for each method after all
    the other checks for each method, and adds a bit of logic at the top of
    the loop to skip methods that are disabled.
    
    This avoids running the recipient finding logic for methods that are
    disabled for any other reason, which should significantly improve
    performance for the common case of users only configuring one of the
    notification methods.
    
    * Fix one more code issue pointed out by @ktsaou.
    
    * Avoid multiple forks when finding email recipients.
    
    * Add a unit test mode for the recipient parsing logic.
    
    This adds a unit-test mode for alarm-notify.sh that covers the recipient
    parsing logic and the criticality filtering logic.
    
    Invocation for this testing is as follows:
    
        alarm-notify,sh unittest <role> <cfg> <status> <old_status>
    
    Where `<role>` is the name of the role to use for testing, `<cfg>` is
    the path to the config file to load for testing, and `<status>` and
    `<old_status>` are the simulated current and previous status for the
    test alarm.
    
    The unit testing mode will run all the logic up to and including the
    recipient parsing loop, print out the parsed recipient lists, and then
    exit.
    
    The lines for the parsed recipient lists look like this:
    
        results: <method>: foo bar baz
    
    Where `<method>` is the delivery method for these recipients.
    
    * Renamed variables to improve clarity as suggested by @ktsaou.
    
    * Split email handling from the main recipient loop.
    
    * Fixes to unittest mode.
    
    * Fix incorrect variable name.
    
    * Fix typo.
commit 0259640be1899063832429deed3536bc875e9800
Author: Ilya Mashchenko <ilyamaschenko@gmail.com>
Date:   Mon Feb 18 16:12:22 2019 +0300

    python module sensors fix (#5406)
    
    * get_data indentation fix
    
    * fix divisor of energy and power charts

commit 8516249ca6e41204c02e8dd97039fbf063096cf0
Author: Austin S. Hemmelgarn <ahferroin7@gmail.com>
Date:   Thu Oct 4 07:07:21 2018 -0400

    Add a python plugin for monitoring power supplies on Linux. (#3799)
    
    * Add a python plugin for monitoring power supplies on Linux.
    
    This adds a python-based module for tracking statistics relating to
    Linux kernel power_supply class devices.  This allows tracking battery
    statistics on Linux systems, as well as (in theory) other energy storage
    devices that utilize the kernel's power_supply class.
    
    The primary purpose of this module is twofold:
    
    - To provide a way for battery powered IoT devices to easily alert about a
    low battery.
    - To provide a way for all battery powered devices to alert on some easy
    to monitor battery health conditions.
    
    It provides up to four charts, one which provides the remaining capacity
    as a percentage, and three others which report info about charge (in
    amp-hours), energy (in watt-hours), and voltage, each providing info
    about the current values, and possibly minimal and maximal values that
    can be used for computing battery life.
    
    Exact support provided by each individual device varies.  Almost all
    provide the percentage capacity, but beyond that they may or may not
    support any or all of the attributes needed for the other three charts
    (ACPI compliant systems for example support most of the charge related
    ones, and two of the voltage related values, but none of the energy
    related ones).
    
    Data collection is done by scanning entries in /sys/class/power_supply.
    One job must be created for each power supply to be monitored, and there
    is no autodetection (though the config includes an example that should
    work to monitor the main battery on most laptops).
    
    * Fix the build.
    
    * Fix one bug and various style issues.
    
    * Add a check to make sure it only runs on Linux.
    
    * Fixed formatting issues reported by flake8.
    
    * Updated to only collect capacity by default.
    
    * Add an alarm to alert on low battery.
    
    * Update function names to not be sunder style.
    
    * Split chart generation to a separate function.
    
    * Remove get_sysfs_value_or_zero.

commit 3dbcbc5d04233a5220f0cc5793fc3611adfc6121
Author: Chris <github.account@chrigel.net>
Date:   Fri Jul 7 00:19:27 2017 +0200

    forgot the energy units

commit b25815c0a753516f73f7c288418b3a3a391d94b2
Author: BrainDoctor <github.account@chrigel.net>
Date:   Thu Jul 6 15:47:06 2017 +0200

    Improving the dashboard and replaced inverter energy chart with site energy chart.

commit df1913cea2e08a9a02ecb623bec218cec546de3f
Author: Costa Tsaousis (ktsaou) <costa@tsaousis.gr>
Date:   Sat Oct 3 21:28:44 2015 +0300

    added all possible sensors (temperature, voltage, current, energy, power, humidity, fans)
