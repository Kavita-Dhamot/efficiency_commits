commit 86c3b84388813c9d6cab6031bc36d87a8a169fee
Merge: 8bda5e098 b69a106bc
Author: fanquake <fanquake@gmail.com>
Date:   Thu Sep 23 16:47:23 2021 +0800

    Merge bitcoin/bitcoin#23036: test: use test_framework.p2p `P2P_SERVICES` constant in functional tests
    
    b69a106bcd8ddefdb810df6ebb3625c430197e04 test: use test_framework.p2p P2P_SERVICES in functional tests (Jon Atack)
    
    Pull request description:
    
      `P2P_SERVICES` is defined in `test/functional/test_framework/p2p.py`, so we can use it as a single definition for our functional tests. It may also be a tiny bit more efficient to use the constant rather than calculating `NODE_NETWORK | NODE_WITNESS` every time we need it in the tests.
    
    ACKs for top commit:
      laanwj:
        Code review ACK b69a106bcd8ddefdb810df6ebb3625c430197e04
      klementtan:
        crACK b69a106bcd8ddefdb810df6ebb3625c430197e04
      fanquake:
        ACK b69a106bcd8ddefdb810df6ebb3625c430197e04 - didn't look at the formatting changes.
    
    Tree-SHA512: f83e593663a69182986325d9ba2b4b787b87896d6648973f4f802f191a2573201b9e7d7e10e69662ef1965fa63268845726ed1aa5742a2e38dcccf4aebc6a961

commit da4e2f1da0388d424659fa8c853fcaf37b4b5959
Author: Jon Atack <jon@atack.com>
Date:   Thu Sep 16 15:08:58 2021 +0200

    bench: various args improvements
    
    - use ALLOW_BOOL for -list arg instead of ALLOW_ANY
    - touch up `-asymptote=<n1,n2,n3...>` help
    - pack Args struct a bit more efficiently
    - handle args in alphabetical order

commit eb2e113df13c7b1ede279878f5cbad877af49f8e
Author: Martin Zumsande <mzumsande@gmail.com>
Date:   Thu Sep 9 21:41:51 2021 +0200

    addrman: Improve performance of Good
    
    This is done by removing an unnecessary loop in Good_() and looping
    through the new tables in MakeTried() more efficiently, choosing a
    starting value that allow us to stop early in typical cases.
    
    Co-authored-by: John Newbery <john@johnnewbery.com>

commit 62cb4009c2acc3d72b8c71327553681295bef814
Merge: fdd80b0a5 5c5d0b626
Author: fanquake <fanquake@gmail.com>
Date:   Wed Aug 18 08:33:54 2021 +0800

    Merge bitcoin/bitcoin#22215: refactor: Add FoundBlock.found member
    
    5c5d0b62648e1b144b7b93c199f45265dac100e5 Add FoundBlock.found member (Russell Yanofsky)
    
    Pull request description:
    
      This change lets IPC serialization code handle FoundBlock arguments more simply and efficiently. Without this change there was no way to determine from a FoundBlock object whether a block was found or not. So in order to correctly implement behavior of leaving FoundBlock output variables unmodified when a block was not found, IPC code would have to read preexisting output variable values from the local process, send them to the remote process, receive output values back from the remote process, and save them to output variables unconditionally. With FoundBlock.found method, the process is simpler. There's no need to read or send preexisting local output variable values, just to read final output values from the remote process and set them conditionally if the block was found.
    
      ---
    
      This PR is part of the [process separation project](https://github.com/bitcoin/bitcoin/projects/10). The commit was first part of larger PR #10102.
    
    ACKs for top commit:
      fjahr:
        Code review ACK 5c5d0b62648e1b144b7b93c199f45265dac100e5
      theStack:
        Concept and code review ACK 5c5d0b62648e1b144b7b93c199f45265dac100e5
      jamesob:
        ACK 5c5d0b62648e1b144b7b93c199f45265dac100e5 ([`jamesob/ackr/22215.1.ryanofsky.refactor_add_foundblock`](https://github.com/jamesob/bitcoin/tree/ackr/22215.1.ryanofsky.refactor_add_foundblock))
      Zero-1729:
        crACK 5c5d0b6
    
    Tree-SHA512: d906e1b7100ff72c3aa06d80bd77673887b2db670ebd52dce7c4f6f557a23a1744c6109308228a37fda6c6ea74f05ba0efecff0ef235ab06ea8acd861fbb8675

commit e841fb503d7a662bde01ec2e4794faa989265950
Author: Pieter Wuille <pieter@wuille.net>
Date:   Wed Feb 17 18:57:19 2021 -0800

    Add precomputed txdata support to MutableTransactionSignatureCreator
    
    This provides a means to pass in a PrecomputedTransactionData object to
    the MutableTransactionSignatureCreator, allowing the prevout data to be
    passed into the signature hashers. It is also more efficient.

commit 5c5d0b62648e1b144b7b93c199f45265dac100e5
Author: Russell Yanofsky <russ@yanofsky.org>
Date:   Thu Dec 10 13:31:48 2020 -0500

    Add FoundBlock.found member
    
    This change lets IPC serialization code handle FoundBlock arguments more
    simply and efficiently. Without this change there was no way to
    determine from a FoundBlock object whether a block was found or not. So
    in order to correctly implement behavior of leaving FoundBlock output
    variables unmodified when a block was not found, IPC code would have to
    read preexisting output variable values from the local process, send
    them to the remote process, receive output values back from the remote
    process, and save them to output variables unconditionally. With
    FoundBlock.found method, the process is simpler. There's no need to read
    or send preexisting local output variable values, just to read final
    output values from the remote process and set them conditionally if the
    block was found.

commit 456c8d6cd80fc3461957a3553a0483756396b988
Merge: ecddd1248 a02c970eb
Author: W. J. van der Laan <laanwj@protonmail.com>
Date:   Wed May 26 15:01:14 2021 +0200

    Merge bitcoin-core/gui#313: qt: Optimize string concatenation by default
    
    a02c970eb001b456d74ddc30750fe8b55348ddac qt, refactor: Revert explicit including QStringBuilder (Hennadii Stepanov)
    3fd3a0fc87a81d42755246830124833e9ca3f0a9 qt, build: Optimize string concatenation (Hennadii Stepanov)
    
    Pull request description:
    
      From [Qt docs](https://doc.qt.io/qt-5/qstring.html#more-efficient-string-construction):
      > ... multiple uses of the \[`QString`\] '+' operator usually means multiple memory allocations. When concatenating n substrings, where n > 2, there can be as many as n - 1 calls to the memory allocator.
    
      With this PR
      > ... the '+' will automatically be performed as the `QStringBuilder` '%' everywhere.
    
      The change in the `src/Makefile.qt.include` file does not justify submitting this PR into the main repo, IMHO.
    
    ACKs for top commit:
      laanwj:
        Code review ACK a02c970eb001b456d74ddc30750fe8b55348ddac
      Talkless:
        utACK a02c970eb001b456d74ddc30750fe8b55348ddac, built successfully on Debian Sid with Qt 5.15.2, but did not check if any displayed strings are "wrong" after refactoring.
      jarolrod:
        ACK a02c970eb001b456d74ddc30750fe8b55348ddac
    
    Tree-SHA512: cbb476ee96f27c3bd6e125efab74d8bf24bbdb4c30576b3feea45e203405f3bf5b497dd7d3e11361fc825fcbf4b893b152921a9efdeaf73b42d1865d85f0ae84

commit 3fd3a0fc87a81d42755246830124833e9ca3f0a9
Author: Hennadii Stepanov <32963518+hebasto@users.noreply.github.com>
Date:   Mon May 3 11:16:06 2021 +0300

    qt, build: Optimize string concatenation
    
    The defined QT_USE_QSTRINGBUILDER macro means using the QStringBuilder
    for efficient string concatenation in all Qt code by default.

commit 2b45cf0bcdb3d2c1de46899e30885c953b57b475
Merge: 480bf01c2 5f96d7d22
Author: W. J. van der Laan <laanwj@protonmail.com>
Date:   Fri Apr 30 08:31:41 2021 +0200

    Merge bitcoin/bitcoin#19521: Coinstats Index
    
    5f96d7d22d8e05876c6fc014e70488699950fe38 rpc: gettxoutsetinfo rejects hash_serialized_2 for specific height (Fabian Jahr)
    23fe50436be641d7417152adc683192649ba206a test: Add test for coinstatsindex behavior in reorgs (Fabian Jahr)
    90c966b0f3cfbd6bce5883f46d8527c6853a86a2 rpc: Allow gettxoutsetinfo and getblockstats for stale blocks (Fabian Jahr)
    b9362392aef2689bc106c20925859ede555d082b index, rpc: Add use_index option for gettxoutsetinfo (Fabian Jahr)
    bb7788b121a30489bc81a1f46dde6a9b19ae4ec1 test: Test coinstatsindex robustness across restarts (Fabian Jahr)
    e0938c29099635150014ffc9bb0cafa8049ec55a test: Add tests for block_info in gettxoutsetinfo (Fabian Jahr)
    2501576eccb08af80471c7b7b843b189ad6758c0 rpc, index: Add verbose amounts tracking to Coinstats index (Fabian Jahr)
    655d929836a71af23d2035d2e2e99ad8b8c340c3 test: add coinstatsindex getindexinfo coverage, improve current tests (Jon Atack)
    ca01bb8d689f93e1c7669b0ba7a4994c0206dabd rpc: Add Coinstats index to getindexinfo (Fabian Jahr)
    57a026c30fef3138bb8db46e6865acb9dc2674f8 test: Add unit test for Coinstats index (Fabian Jahr)
    6a4c0c09ab4d073a26c3c4a02783d5dcd88f6eef test: Add functional test for Coinstats index (Fabian Jahr)
    3f166ecc125fce6ccd995687fa16572090a5d099 rpc: gettxoutsetinfo can be requested for specific blockheights (Fabian Jahr)
    3c914d58ff323255b32e717d0ce28209ec0abdaa index: Coinstats index can be activated with command line flag (Fabian Jahr)
    dd58a4de21469d6d848ae309edc47f558628221d index: Add Coinstats index (Fabian Jahr)
    a8a46c4b3cfda4b95c92a36f8cebd3606377e57d refactor: Simplify ApplyStats and ApplyHash (Fabian Jahr)
    9c8a265fd21a87228c18a1661df99fedc1866baf refactor: Pass hash_type to CoinsStats in stats object (Fabian Jahr)
    2e2648a9021dfbb6e17dfa81472f057dacbc34e0 crypto: Make MuHash Remove method efficient (Fabian Jahr)
    
    Pull request description:
    
      This is part of the coinstats index project tracked in #18000
    
      While the review of the new UTXO set hash algorithm (MuHash) takes longer recently #19328 was merged which added the possibility to run `gettxoutsetinfo` with a specific hash type. As the first type it added `hash_type=none` which skips the hashing of the UTXO set altogether. This alone did not make `gettxoutsetinfo` much faster but it allows the use of an index for the remaining coin statistics even before a new hashing algorithm has been added. Credit to Sjors for the idea to take this intermediate step.
    
      Features summary:
      - Users can start their node with the option `-coinstatsindex` which syncs the index in the background
      - After the index is synced the user can  use `gettxoutsetinfo` with `hash_type=none` or `hash_type=muhash` and will get the response instantly out of the index
      - The user can specify a height or block hash when calling `gettxoutsetinfo` to see coin statistics at a specific block height
    
    ACKs for top commit:
      Sjors:
        re-tACK 5f96d7d22d8e05876c6fc014e70488699950fe38
      jonatack:
        Code review re-ACK 5f96d7d22d8e05876c6fc014e70488699950fe38 per `git range-diff 13d27b4 07201d3 5f96d7d`
      promag:
        Tested ACK 5f96d7d22d8e05876c6fc014e70488699950fe38. Light code review ACK 5f96d7d22d8e05876c6fc014e70488699950fe38.
    
    Tree-SHA512: cbca78bee8e9605c19da4fbcd184625fb280200718396c694a56c7daab6f44ad23ca9fb5456d09f245d8b8d9659fdc2b3f3ce5e953c1c6cf4003dbc74c0463c2

commit 2e2648a9021dfbb6e17dfa81472f057dacbc34e0
Author: Fabian Jahr <fjahr@protonmail.com>
Date:   Thu Feb 25 19:09:12 2021 +0100

    crypto: Make MuHash Remove method efficient
    
    Division of MuHash objects are very expensive and multiplication relatively cheap. The whole idea of introducing and tracking numerator and denominators seperately as a representation of the internal state was so that divisions would be rare. So using divison in the Remove method did not make any sense and was just a silly mistake which is corrected here.

commit 9017d55e7c325eba486075bc3403dc8c9b252b75
Merge: cd66d8b1d 84716b134
Author: Jonas Schnelli <dev@jonasschnelli.ch>
Date:   Thu Feb 18 09:40:33 2021 +0100

    Merge #15946: Allow maintaining the blockfilterindex when using prune
    
    84716b134e9afca2fba7731de4af1f22fa1b1518 Add "index/blockfilterindex -> validation -> index/blockfilterindex" to expected circular dependencies (Jonas Schnelli)
    ab3a0a2fb915d8b8384c30a8b38b4b5cc35236fd Add functional test for blockfilterindex in prune-mode (Jonas Schnelli)
    c286a22f7b63a8bd336d5d7606c339053ee0054b Add debug startup parameter -fastprune for more effective pruning tests (Jonas Schnelli)
    5e112269c311a559bfded814d3c3c438349a1986 Avoid pruning below the blockfilterindex sync height (Jonas Schnelli)
    00d57ff76854938ead800767fb673a8af46eac8e Avoid accessing nullpointer in BaseIndex::GetSummary() (Jonas Schnelli)
    6abe9f5b11cd4a5ecb6caca8443fe2950a417842 Allow blockfilter in conjunction with prune (Jonas Schnelli)
    
    Pull request description:
    
      Maintaining the blockfilterindexes in prune mode is possible and may lead to efficient p2p based rescans of wallets (restore backups, import/sweep keys) beyond the prune height (rescans not part of that PR).
    
      This PR allows running the blockfilterindex(es) in conjunction with pruning.
      * Bitcoind/Qt will shutdown during startup when missing block data has been detected ([re]enable `-blockfilterindex` when we already have pruned)
      * manual block pruning is disabled during blockfilterindex sync
      * auto-pruning is delayed during blockfilterindex sync
    
      ToDos:
      * [x] Functional tests
    
    ACKs for top commit:
      fjahr:
        Code review ACK 84716b1
      ryanofsky:
        Code review ACK 84716b134e9afca2fba7731de4af1f22fa1b1518. Only changes since last review were suggested new FindFilesToPrune argument and test.
      benthecarman:
        tACK 84716b134e9afca2fba7731de4af1f22fa1b1518
    
    Tree-SHA512: 91d832c6c562c463f7ec7655c08956385413a99a896640b9737bda0183607fac530435d03d87c3c0e70c61ccdfe73fe8f3639bc7d26d33ca7e60925ebb97d77a

commit 3f205808a5f20c9398d8e74b7e83220a129acc7d
Merge: 9dbcd3710 cd03513dc
Author: Wladimir J. van der Laan <laanwj@protonmail.com>
Date:   Wed Dec 16 16:40:42 2020 +0100

    Merge #20605: init: Signal-safe instant shutdown
    
    cd03513dc2fcccaa142e9632a28b38efd0056436 init: Signal-safe instant shutdown (Wladimir J. van der Laan)
    
    Pull request description:
    
      Replace the 200ms polling loop with a faster and more efficient waiting operation. This should speed up short RPC tests.
    
      This change has been tried a few times before, but abandoned every time because solutions used a condition variable which is not safe for use in signals, as they need to be reentrant.
    
      On UNIX-ish OSes, use a safe way: a pipe. When shutdown is requested write a dummy byte to the pipe. Waiting for shutdown is a matter of a blocking read from the pipe.
    
      On Windows, there are no signals so using a condition variable is safe.
    
      This only affects bitcoind. The GUI is unaffected by this change, and keeps polling as before in `BitcoinGUI::detectShutdown()`. It might be possible to listen to a pipe there, too, but I'm not sure, and it's complicated by the GUI-node abstraction.
    
    ACKs for top commit:
      jonatack:
        ACK cd03513dc2fcccaa142e9632a28b38efd0056436 tested on Debian 5.9.11-1 (2020-11-27) x86_64 GNU/Linux
    
    Tree-SHA512: ed2f532f69fec4855c17bf7b8f3d0eb96e78ee2a3c13d374dd2c6add06e3ad6a190da8ed8f9d7a76532cf998222d67f57e35b206aec29675e96437448ae7e13c

commit cd03513dc2fcccaa142e9632a28b38efd0056436
Author: Wladimir J. van der Laan <laanwj@protonmail.com>
Date:   Tue Dec 8 21:49:06 2020 +0100

    init: Signal-safe instant shutdown
    
    Replace the 200ms polling loop with a faster and more efficient waiting
    operation.
    
    This was tried a few times before, but given up every time because
    solutions use a condition variable which is not safe for use in signals
    as they need to be reentrant.
    
    On UNIX-ish OSes, use a safe way: a pipe. When shutdown is requested
    write a dummy byte to the pipe. Waiting for shutdown is a matter of a
    blocking read from the pipe.
    
    On Windows, there are no signals so using a condition variable is safe.

commit ba4b3fbcf21317a9410f3be913e4437d58968091
Merge: be375b220 894fb33f4
Author: fanquake <fanquake@gmail.com>
Date:   Mon Sep 14 10:28:45 2020 +0800

    Merge #19944: Update secp256k1 subtree (including BIP340 support)
    
    b9c1a7648131c5deec9704ee9acd00ec1820b9ce Squashed 'src/secp256k1/' changes from 2ed54da18a..8ab24e8dad (Pieter Wuille)
    
    Pull request description:
    
      This updates our src/secp256k1 subtree to the latest libsecp256k1 upstream version.
    
      As it adds BIP340 support (see https://github.com/bitcoin-core/secp256k1/pull/558), this is a prerequisite for #17977. In particular, it contains:
      * A few generic library improvements
      * Support for x-only public keys as used by BIP340.
      * Support for "key pair" objects, making signing more efficient by using a precomputed public key.
      * Signing support for BIP340 Schnorr (single-party) signatures.
      * Verification support for BIP340 Schnorr signatures.
      * Support for verifying tweaked x-only keys, as used by BIP341's Taproot construction.
    
      Things that are not included:
      * MuSig, nor any kind of multisignatures, threshold signatures, ... on top.
      * Batch verification.
      * Support for variable-length messages in BIP340 (which are still being discussed, but won't affect BIP341, or Bitcoin Core).
      * A few more generic improvements that are still in the pipeline, including faster modular inversions.
    
    ACKs for top commit:
      instagibbs:
        ACK 894fb33f4c1b24667891f7d2aff9f486177b1173
      fanquake:
        ACK 894fb33f4c1b24667891f7d2aff9f486177b1173. Any Valgrind concerns will be addressed upstream, see discussion in https://github.com/bitcoin-core/secp256k1/pull/813, and if necessary, can be pulled into our tree prior to the 0.21.0 branch off. They are not a blocker for merging this PR in it's current state.
      benthecarman:
        ACK `894fb33`
    
    Tree-SHA512: 6dc992f4477069b7fbd223316f1be955750923be1479c38adad2312649fdca1f316edb375c42ef9d97cea2407caaef49fb8c93abd6c037fe1a522910cbbc2479

commit 4ebe2f6e752c453ff572eda4a108e747d6586c97
Merge: 2a784723f 78c312c98
Author: Wladimir J. van der Laan <laanwj@protonmail.com>
Date:   Thu Jul 30 15:20:19 2020 +0200

    Merge #18011: Replace current benchmarking framework with nanobench
    
    78c312c983255e15fc274de2368a2ec13ce81cbf Replace current benchmarking framework with nanobench (Martin Ankerl)
    
    Pull request description:
    
      Replace current benchmarking framework with nanobench
    
      This replaces the current benchmarking framework with nanobench [1], an
      MIT licensed single-header benchmarking library, of which I am the
      autor. This has in my opinion several advantages, especially on Linux:
    
      * fast: Running all benchmarks takes ~6 seconds instead of 4m13s on
        an Intel i7-8700 CPU @ 3.20GHz.
    
      * accurate: I ran e.g. the benchmark for SipHash_32b 10 times and
        calculate standard deviation / mean = coefficient of variation:
    
        * 0.57% CV for old benchmarking framework
        * 0.20% CV for nanobench
    
        So the benchmark results with nanobench seem to vary less than with
        the old framework.
    
      * It automatically determines runtime based on clock precision, no need
        to specify number of evaluations.
    
      * measure instructions, cycles, branches, instructions per cycle,
        branch misses (only Linux, when performance counters are available)
    
      * output in markdown table format.
    
      * Warn about unstable environment (frequency scaling, turbo, ...)
    
      * For better profiling, it is possible to set the environment variable
        NANOBENCH_ENDLESS to force endless running of a particular benchmark
        without the need to recompile. This makes it to e.g. run "perf top"
        and look at hotspots.
    
      Here is an example copy & pasted from the terminal output:
    
      |             ns/byte |              byte/s |    err% |        ins/byte |        cyc/byte |    IPC |       bra/byte |   miss% |     total | benchmark
      |--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------
      |                2.52 |      396,529,415.94 |    0.6% |           25.42 |            8.02 |  3.169 |           0.06 |    0.0% |      0.03 | `bench/crypto_hash.cpp RIPEMD160`
      |                1.87 |      535,161,444.83 |    0.3% |           21.36 |            5.95 |  3.589 |           0.06 |    0.0% |      0.02 | `bench/crypto_hash.cpp SHA1`
      |                3.22 |      310,344,174.79 |    1.1% |           36.80 |           10.22 |  3.601 |           0.09 |    0.0% |      0.04 | `bench/crypto_hash.cpp SHA256`
      |                2.01 |      496,375,796.23 |    0.0% |           18.72 |            6.43 |  2.911 |           0.01 |    1.0% |      0.00 | `bench/crypto_hash.cpp SHA256D64_1024`
      |                7.23 |      138,263,519.35 |    0.1% |           82.66 |           23.11 |  3.577 |           1.63 |    0.1% |      0.00 | `bench/crypto_hash.cpp SHA256_32b`
      |                3.04 |      328,780,166.40 |    0.3% |           35.82 |            9.69 |  3.696 |           0.03 |    0.0% |      0.03 | `bench/crypto_hash.cpp SHA512`
    
      [1] https://github.com/martinus/nanobench
    
    ACKs for top commit:
      laanwj:
        ACK 78c312c983255e15fc274de2368a2ec13ce81cbf
    
    Tree-SHA512: 9e18770b18b6f95a7d0105a4a5497d31cf4eb5efe6574f4482f6f1b4c88d7e0946b9a4a1e9e8e6ecbf41a3f2d7571240677dcb45af29a6f0584e89b25f32e49e

commit 655b1957470c39bcab64917747c9f467444bd809
Author: John Newbery <john@johnnewbery.com>
Date:   Mon Jun 15 11:33:14 2020 -0400

    [net processing] Continue SendMessages processing if not disconnecting peer
    
    If we don't disconnect a peer in MaybeDiscourageAndDisconnect because it
    has NOBAN permissions or it's a manual connection, continue SendMessages
    processing rather than exiting early.
    
    The previous behaviour was that we'd miss the SendMessages processing on
    this iteration of the MessageHandler loop. That's not a problem since
    SendMessages() would just be called again on the next iteration, but it
    was slightly inefficient and confusing.

commit 78c312c983255e15fc274de2368a2ec13ce81cbf
Author: Martin Ankerl <martin.ankerl@gmail.com>
Date:   Sat Jun 13 09:37:27 2020 +0200

    Replace current benchmarking framework with nanobench
    
    This replaces the current benchmarking framework with nanobench [1], an
    MIT licensed single-header benchmarking library, of which I am the
    autor. This has in my opinion several advantages, especially on Linux:
    
    * fast: Running all benchmarks takes ~6 seconds instead of 4m13s on
      an Intel i7-8700 CPU @ 3.20GHz.
    
    * accurate: I ran e.g. the benchmark for SipHash_32b 10 times and
      calculate standard deviation / mean = coefficient of variation:
    
      * 0.57% CV for old benchmarking framework
      * 0.20% CV for nanobench
    
      So the benchmark results with nanobench seem to vary less than with
      the old framework.
    
    * It automatically determines runtime based on clock precision, no need
      to specify number of evaluations.
    
    * measure instructions, cycles, branches, instructions per cycle,
      branch misses (only Linux, when performance counters are available)
    
    * output in markdown table format.
    
    * Warn about unstable environment (frequency scaling, turbo, ...)
    
    * For better profiling, it is possible to set the environment variable
      NANOBENCH_ENDLESS to force endless running of a particular benchmark
      without the need to recompile. This makes it to e.g. run "perf top"
      and look at hotspots.
    
    Here is an example copy & pasted from the terminal output:
    
    |             ns/byte |              byte/s |    err% |        ins/byte |        cyc/byte |    IPC |       bra/byte |   miss% |     total | benchmark
    |--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------
    |                2.52 |      396,529,415.94 |    0.6% |           25.42 |            8.02 |  3.169 |           0.06 |    0.0% |      0.03 | `bench/crypto_hash.cpp RIPEMD160`
    |                1.87 |      535,161,444.83 |    0.3% |           21.36 |            5.95 |  3.589 |           0.06 |    0.0% |      0.02 | `bench/crypto_hash.cpp SHA1`
    |                3.22 |      310,344,174.79 |    1.1% |           36.80 |           10.22 |  3.601 |           0.09 |    0.0% |      0.04 | `bench/crypto_hash.cpp SHA256`
    |                2.01 |      496,375,796.23 |    0.0% |           18.72 |            6.43 |  2.911 |           0.01 |    1.0% |      0.00 | `bench/crypto_hash.cpp SHA256D64_1024`
    |                7.23 |      138,263,519.35 |    0.1% |           82.66 |           23.11 |  3.577 |           1.63 |    0.1% |      0.00 | `bench/crypto_hash.cpp SHA256_32b`
    |                3.04 |      328,780,166.40 |    0.3% |           35.82 |            9.69 |  3.696 |           0.03 |    0.0% |      0.03 | `bench/crypto_hash.cpp SHA512`
    
    [1] https://github.com/martinus/nanobench
    
    * Adds support for asymptotes
    
      This adds support to calculate asymptotic complexity of a benchmark.
      This is similar to #17375, but currently only one asymptote is
      supported, and I have added support in the benchmark `ComplexMemPool`
      as an example.
    
      Usage is e.g. like this:
    
      ```
      ./bench_bitcoin -filter=ComplexMemPool -asymptote=25,50,100,200,400,600,800
      ```
    
      This runs the benchmark `ComplexMemPool` several times but with
      different complexityN settings. The benchmark can extract that number
      and use it accordingly. Here, it's used for `childTxs`. The output is
      this:
    
      | complexityN |               ns/op |                op/s |    err% |          ins/op |          cyc/op |    IPC |     total | benchmark
      |------------:|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|----------:|:----------
      |          25 |        1,064,241.00 |              939.64 |    1.4% |    3,960,279.00 |    2,829,708.00 |  1.400 |      0.01 | `ComplexMemPool`
      |          50 |        1,579,530.00 |              633.10 |    1.0% |    6,231,810.00 |    4,412,674.00 |  1.412 |      0.02 | `ComplexMemPool`
      |         100 |        4,022,774.00 |              248.58 |    0.6% |   16,544,406.00 |   11,889,535.00 |  1.392 |      0.04 | `ComplexMemPool`
      |         200 |       15,390,986.00 |               64.97 |    0.2% |   63,904,254.00 |   47,731,705.00 |  1.339 |      0.17 | `ComplexMemPool`
      |         400 |       69,394,711.00 |               14.41 |    0.1% |  272,602,461.00 |  219,014,691.00 |  1.245 |      0.76 | `ComplexMemPool`
      |         600 |      168,977,165.00 |                5.92 |    0.1% |  639,108,082.00 |  535,316,887.00 |  1.194 |      1.86 | `ComplexMemPool`
      |         800 |      310,109,077.00 |                3.22 |    0.1% |1,149,134,246.00 |  984,620,812.00 |  1.167 |      3.41 | `ComplexMemPool`
    
      |   coefficient |   err% | complexity
      |--------------:|-------:|------------
      |   4.78486e-07 |   4.5% | O(n^2)
      |   6.38557e-10 |  21.7% | O(n^3)
      |   3.42338e-05 |  38.0% | O(n log n)
      |   0.000313914 |  46.9% | O(n)
      |     0.0129823 | 114.4% | O(log n)
      |     0.0815055 | 133.8% | O(1)
    
      The best fitting curve is O(n^2), so the algorithm seems to scale
      quadratic with `childTxs` in the range 25 to 800.

commit bf0a510981ddc28c754881ca21c50ab18e5f2b59
Author: Russell Yanofsky <russ@yanofsky.org>
Date:   Thu Apr 2 07:42:01 2020 -0400

    gui: Avoid wallet tryGetBalances calls before TransactionChanged or BlockTip notifications
    
    interfaces::Wallet::tryGetBalances was recently updated in
    https://github.com/bitcoin/bitcoin/pull/18160 to avoid computing balances
    internally, but this not efficient as it could be with #10102 because
    tryGetBalances is an interprocess call.
    
    Implementing the TransactionChanged / BlockTip check outside of tryGetBalances
    also allows tryGetBalances to be simplified in next commit 'Revert "gui: Avoid
    Wallet::GetBalance in WalletModel::pollBalanceChanged"'.

commit 3eb8b1c3924c1d14c1a4234eb5360f32808b86dc
Merge: 75917591c 96cb59732
Author: MarcoFalke <falke.marco@gmail.com>
Date:   Fri Apr 10 16:32:12 2020 -0400

    Merge #17905: gui: Avoid redundant tx status updates
    
    96cb597325f64cadb3cf43e2cdb3d7c1e2e49891 gui: Avoid redundant tx status updates (Russell Yanofsky)
    
    Pull request description:
    
      This PR is part of the [process separation project](https://github.com/bitcoin/bitcoin/projects/10).
    
      In `TransactionTablePriv::index`, avoid calling `interfaces::Wallet::tryGetTxStatus` if the status is up to date as of the most recent `NotifyBlockTip` notification.  Store height from the most recent notification in a new `ClientModel::cachedNumBlocks` variable in order to check this.
    
      This avoids floods of IPC traffic from `tryGetTxStatus` with #10102 when there are a lot of transactions. It might also make the GUI a little more efficient even when there is no IPC.
    
    ACKs for top commit:
      promag:
        Code review ACK 96cb597325f64cadb3cf43e2cdb3d7c1e2e49891.
      hebasto:
        ACK 96cb597325f64cadb3cf43e2cdb3d7c1e2e49891
    
    Tree-SHA512: fce597bf52a813ad4923110d0a39229ea09e1631e0d580ea18cffb09e58cdbb4b111a40a9a9270ff16d8163cd47b0bd9f1fe7e3a6c7ebb19198f049f8dd1aa46

commit 4d80274b9963e85d6e6dc79a41cd3ff4f389ada5
Merge: 3516a31ea 79facb11e
Author: fanquake <fanquake@gmail.com>
Date:   Sat Mar 7 07:05:38 2020 +0800

    Merge #18241: wallet/refactor: refer to CWallet immutably when possible
    
    79facb11e92f8b61063f301027dee7c7344eb1be wallet: use constant CWallets in rpcwallet.cpp (Karl-Johan Alm)
    d9b0ebc1da8758645f6de24a4a557511ef9b5e36 wallet: make ReserveDestination pwallet ivar const (Karl-Johan Alm)
    57c569e4d9779e2263848770e0ba7eab3054a1bf wallet: make BackupWallet() const (Karl-Johan Alm)
    df3a818d2a9fe48e656a8ad2da18fab8a1bfd6e3 wallet: make getters const (Karl-Johan Alm)
    227b9dd2d6e1914edfec108af6bec5f12d9f6f39 wallet/spkm: make GetOldestKeyPoolTime() const (Karl-Johan Alm)
    22d329ad0ed3ed501bd811720be6a2876d1afe4d wallet: use constant CWallets in rpcdump.cpp (Karl-Johan Alm)
    7b3587b29db9eaf11718fc09d48817a45a0a429a wallet/db: make IsDummy() const (Karl-Johan Alm)
    d366795d180bc52ba750f71f201a6e5e0c40f1b6 wallet/db: make Backup() const (Karl-Johan Alm)
    8cd0b86340870d8f359e4ae26880e03ea36818ab wallet: make CanGetAddresses() const (Karl-Johan Alm)
    037fa770eb1ed5152b3ef2c5d3fb2a812d3ef944 wallet: make KeypoolCountExternalKeys() const (Karl-Johan Alm)
    ddc93557ad0cf8e433df850d38710828ccd99c16 wallet: make CanGenerateKeys() const (Karl-Johan Alm)
    dc2d0650fdb69d27fe1b0092555b7841d542a635 make BlockUntilSyncedToCurrentChain() const (Karl-Johan Alm)
    
    Pull request description:
    
      A lot of places refer to `CWallet*`'s as `CWallet * const`, which translates to *"an immutable pointer to a mutable `CWallet` instance"*; this is
    
      1. often not what the author meant, especially as a lot of these places do not at all modify the wallet object, and
      2. confusing, as it tends to suggest that this is a proper way to refer to a constant `CWallet` instance.
    
      This PR changes references to wallets to `const CWallet* const` whenever immutability is expected. This should result in no behavioral changes at all, and improved compile-time error checking.
    
      Note from irc:
    
      > &lt;sipa&gt; sounds good to me; this is the sort of change that as long as it compiles, the behavior shouldn't change
      > &lt;sipa&gt; though in general it may lead to introducing automatic copying of objects sometimes (e.g. trying to std::move a const object will work, but generally result in a copy rather than an efficient move)
      > &lt;sipa&gt; CWallet objects aren't copied or moved though
    
    ACKs for top commit:
      laanwj:
        ACK 79facb11e92f8b61063f301027dee7c7344eb1be
      Empact:
        ACK https://github.com/bitcoin/bitcoin/pull/18241/commits/79facb11e92f8b61063f301027dee7c7344eb1be
      promag:
        ACK 79facb11e92f8b61063f301027dee7c7344eb1be.
      fjahr:
        ACK 79facb11e92f8b61063f301027dee7c7344eb1be
    
    Tree-SHA512: 80a80c1a52f0f788d0ccb268b53bc0f46c796643a3c5a22b55bbbde4ffa6c7e347784e5e53b1e488a3b4e14399e31d5be9417ad5b6319c74a462609e9b1a98e8

commit 96cb597325f64cadb3cf43e2cdb3d7c1e2e49891
Author: Russell Yanofsky <russ@yanofsky.org>
Date:   Wed Aug 1 13:38:45 2018 -0400

    gui: Avoid redundant tx status updates
    
    In TransactionTablePriv::index, avoid calling
    interfaces::Wallet::tryGetTxStatus if the status is up to date as of the most
    recent NotifyBlockTip notification.  Store height from the most recent
    notification in a new ClientModel::cachedNumBlocks variable in order to check
    this.
    
    This avoids floods of IPC traffic from tryGetTxStatus with #10102 when there
    are a lot of transactions. It might also make the GUI a little more efficient
    even when there is no IPC.

commit dc0f1480746b34aa3ca2d9c0f1ec764083026b40
Author: Russell Yanofsky <russ@yanofsky.org>
Date:   Mon Nov 11 19:05:12 2019 -0500

    refactor: Replace FlagsOfKnownArg with GetArgFlags
    
    Rename suggested by João Barbosa <joao.paulo.barbosa@gmail.com>
    https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-519048000
    
    This also gets rid of ArgsManager::NONE constant, which was an implementation
    detail not meant to be used by ArgsManager callers.
    
    Finally this reverts a change from 7f40528cd50fc43ac0bd3e785de24d661adddb7a
    https://github.com/bitcoin/bitcoin/pull/15934 adding "-" characters to argument
    names. Better for GetArgFlags to require "-" prefixes for consistency with
    other ArgsManager methods, and to be more efficient later when GetArg functions
    need to call GetArgFlags (https://github.com/bitcoin/bitcoin/pull/16545)
    
    This commit does not change behavior.

commit 4a0abf694ee10cf186f25a67ca35c3fce0c10874
Author: Russell Yanofsky <russ@yanofsky.org>
Date:   Tue Nov 5 10:36:55 2019 -0500

    Pass CTxDestination to ScriptPubKeyMan::GetMetadata
    
    Pass CTxDestination instead of more ambiguous uint160 hash value. This is more
    type safe and more efficient since it avoids doing map lookups that will always
    fail and were not done previously before
    a18edd7b383d667b15b6d4b87aa3a055a9fa5051 from
    https://github.com/bitcoin/bitcoin/pull/17304
    
    Change suggested by Andrew Chow <achow101-github@achow101.com> in
    https://github.com/bitcoin/bitcoin/pull/17304#discussion_r340345745 and
    https://github.com/bitcoin/bitcoin/pull/17381#issuecomment-549994944

commit 0ff7cd7d0c074448db636bcc73e7879b7e4b21ec
Merge: f2a094884 7d8d3e6a2
Author: MarcoFalke <falke.marco@gmail.com>
Date:   Fri Oct 18 09:56:43 2019 -0400

    Merge #16889: Add some general std::vector utility functions
    
    7d8d3e6a2ad827fa916e3909a18dedb9f7fdce43 Add tests for util/vector.h's Cat and Vector (Pieter Wuille)
    e65e61c812df90a56e3ce4a8e76c4b746766f387 Add some general std::vector utility functions (Pieter Wuille)
    
    Pull request description:
    
      This is another general improvement extracted from #16800 .
    
      Two functions are added are:
    
      * Vector(arg1,arg2,arg3,...) constructs a vector with the specified arguments as elements. The vector's type is derived from the arguments. If some of the arguments are rvalue references, they will be moved into place rather than copied (which can't be achieved using list initialization).
      * Cat(vector1,vector2) returns a concatenation of the two vectors, efficiently moving elements when relevant.
    
      Vector generalizes (and replaces) the `Singleton` function in src/descriptor.cpp, and `Cat` replaces the function in bech32.cpp
    
    ACKs for top commit:
      laanwj:
        ACK 7d8d3e6a2ad827fa916e3909a18dedb9f7fdce43
      MarcoFalke:
        ACK 7d8d3e6a2ad827fa916e3909a18dedb9f7fdce43 (enjoyed reading the tests, but did not compile)
    
    Tree-SHA512: 92325f14e90d7e7d9d920421979aec22bb0d730e0291362b4326cccc76f9c2d865bec33a797c5c0201773468c3773cb50ce52c8eee4c1ec1a4d10db5cf2b9d2a

commit e65e61c812df90a56e3ce4a8e76c4b746766f387
Author: Pieter Wuille <pieter.wuille@gmail.com>
Date:   Wed Aug 28 15:12:51 2019 -0700

    Add some general std::vector utility functions
    
    Added are:
    
    * Vector(arg1,arg2,arg3,...) constructs a vector with the specified
      arguments as elements. The vector's type is derived from the
      arguments. If some of the arguments are rvalue references, they
      will be moved into place rather than copied (which can't be achieved
      using list initialization).
    
    * Cat(vector1,vector2) returns a concatenation of the two vectors,
      efficiently moving elements when relevant.
    
    Vector generalizes (and replaces) the Singleton function in
    src/descriptor.cpp, and Cat replaces the Cat function in bech32.cpp

commit 67be6d7a177cb14ca8a68b9c6361dfaae9e64f2b
Merge: a7aa80902 c5b404e8f
Author: Wladimir J. van der Laan <laanwj@protonmail.com>
Date:   Wed Aug 14 16:35:54 2019 +0200

    Merge #16248: Make whitebind/whitelist permissions more flexible
    
    c5b404e8f1973afe071a07c63ba1038eefe13f0f Add functional tests for flexible whitebind/list (nicolas.dorier)
    d541fa391844f658bd7035659b5b16695733dd56 Replace the use of fWhitelisted by permission checks (nicolas.dorier)
    ecd5cf7ea4c3644a30092100ffc399e30e193275 Do not disconnect peer for asking mempool if it has NO_BAN permission (nicolas.dorier)
    e5b26deaaa6842f7dd7c4537ede000f965ea0189 Make whitebind/whitelist permissions more flexible (nicolas.dorier)
    
    Pull request description:
    
      # Motivation
    
      In 0.19, bloom filter will be disabled by default. I tried to make [a PR](https://github.com/bitcoin/bitcoin/pull/16176) to enable bloom filter for whitelisted peers regardless of `-peerbloomfilters`.
    
      Bloom filter have non existent privacy and server can omit filter's matches. However, both problems are completely irrelevant when you connect to your own node. If you connect to your own node, bloom filters are the most bandwidth efficient way to synchronize your light client without the need of some middleware like Electrum.
    
      It is also a superior alternative to BIP157 as it does not require to maintain an additional index and it would work well on pruned nodes.
    
      When I attempted to allow bloom filters for whitelisted peer, my proposal has been NACKed in favor of [a more flexible approach](https://github.com/bitcoin/bitcoin/pull/16176#issuecomment-500762907) which should allow node operator to set fine grained permissions instead of a global `whitelisted` attribute.
    
      Doing so will also make follow up idea very easy to implement in a backward compatible way.
    
      # Implementation details
    
      The PR propose a new format for `--white{list,bind}`. I added a way to specify permissions granted to inbound connection matching `white{list,bind}`.
    
      The following permissions exists:
      * ForceRelay
      * Relay
      * NoBan
      * BloomFilter
      * Mempool
    
      Example:
      * `-whitelist=bloomfilter@127.0.0.1/32`.
      * `-whitebind=bloomfilter,relay,noban@127.0.0.1:10020`.
    
      If no permissions are specified, `NoBan | Mempool` is assumed. (making this PR backward compatible)
    
      When we receive an inbound connection, we calculate the effective permissions for this peer by fetching the permissions granted from `whitelist`  and add to it the permissions granted from `whitebind`.
    
      To keep backward compatibility, if no permissions are specified in `white{list,bind}` (e.g. `--whitelist=127.0.0.1`) then parameters `-whitelistforcerelay` and `-whiterelay` will add the permissions `ForceRelay` and `Relay` to the inbound node.
    
      `-whitelistforcerelay` and `-whiterelay` are ignored if the permissions flags are explicitly set in `white{bind,list}`.
    
      # Follow up idea
    
      Based on this PR, other changes become quite easy to code in a trivially review-able, backward compatible way:
    
      * Changing `connect` at rpc and config file level to understand the permissions flags.
      * Changing the permissions of a peer at RPC level.
    
    ACKs for top commit:
      laanwj:
        re-ACK c5b404e8f1973afe071a07c63ba1038eefe13f0f
    
    Tree-SHA512: adfefb373d09e68cae401247c8fc64034e305694cdef104bdcdacb9f1704277bd53b18f52a2427a5cffdbc77bda410d221aed252bc2ece698ffbb9cf1b830577

commit 2d071f5a7055f85d1c7d92de43646663a03a8fce
Merge: d67eff800 55771b7c6
Author: Wladimir J. van der Laan <laanwj@gmail.com>
Date:   Mon Jun 18 15:19:23 2018 +0200

    Merge #13443: Removed unused == operator from CMutableTransaction.
    
    55771b7c6a8d4a204c63e70db73a0071c41a0dc4 Removed unused == operator from CMutableTransaction. (lucash.dev@gmail.com)
    
    Pull request description:
    
      This removes the unused == operator from `CMutableTransaction`.
    
      The motivation is that unused code has a cost but offers no benefit (in general), while also adding the risk of introducing silent bugs. On top of that this particular code is quite inefficient, unnecessarily calculating the hash (it could, say, compare serializations). So if anyone ever needs to use a == comparison on `CMutableTransaction`, they'd be better of having to reimplement it (and add tests) than relying on code that's not being maintained.
    
      Note: after this, trying to use the == operator on CMutableTransactions results in a compilation error:
      ```
      ./primitives/transaction.h:405:15: error: invalid operands to binary expression ('CMutableTransaction' and
            'CMutableTransaction')
      ```
    
    Tree-SHA512: a565af563e09d99347b6fe419f6d48c750b1377295af293a3e0c3c0d815e58aede8d7058987a68d66cfa7ed023e5d3285b12afabd17d0ff9cf11322ba3ce20fe

commit fd96d54f39cf4f66890e0bb40812d47e69728cec
Merge: 25d2df2aa c814e2e7e
Author: Wladimir J. van der Laan <laanwj@gmail.com>
Date:   Wed May 30 16:13:02 2018 +0200

    Merge #13194: Remove template matching and pseudo opcodes
    
    c814e2e7e81fd01fcb07f4a28435741bdc463801 Remove template matching and pseudo opcodes (Pieter Wuille)
    
    Pull request description:
    
      The current code contains a rather complex script template matching engine, which is only used for 3 particular script types (P2PK, P2PKH, multisig). The first two of these are trivial to match for otherwise, and a specialized matcher for multisig is both more compact and more efficient than a generic one.
    
      The goal is being more flexible, so that for example larger standard multisigs inside SegWit outputs are easier to implement.
    
      As a side-effect, it also gets rid of the pseudo opcodes hack.
    
    Tree-SHA512: 643b409c5c36821519f613a43efd399af0ec99b6131f35cd4024decfb2d483d719e0e921cd088bc9832a7ac797cb4a6b1158b8574c82f7fbebb75f1b31b359df

commit c814e2e7e81fd01fcb07f4a28435741bdc463801
Author: Pieter Wuille <pieter.wuille@gmail.com>
Date:   Tue May 8 20:24:06 2018 -0700

    Remove template matching and pseudo opcodes
    
    The current code contains a rather complex script template matching engine,
    which is only used for 3 particular script types (P2PK, P2PKH, multisig).
    The first two of these are trivial to match for otherwise, and a specialized
    matcher for multisig is both more compact and more efficient than a generic
    one.
    
    The goal is being more flexible, so that for example larger standard multisigs
    inside SegWit outputs are more easy to implement.
    
    As a side-effect, it also gets rid of the pseudo opcodes hack.

commit cd5e4381d46d01ca8282f02a18515e7b61de1dde
Merge: 12ac2f0d7 1dfb4e7d7
Author: Wladimir J. van der Laan <laanwj@gmail.com>
Date:   Tue Mar 6 22:14:44 2018 +0100

    Merge #12479: RPC: Add child transactions to getrawmempool verbose output
    
    1dfb4e7d7 [Tests] Check output of parent/child tx list from getrawmempool, getmempooldescendants, getmempoolancestors, and REST interface (Conor Scott)
    fc44cb108 [RPC] Add list of child transactions to verbose output of getrawmempool (Conor Scott)
    
    Pull request description:
    
      `bitcoin-cli getrawmempool true` only lists a transaction's parents in the `depends` field. This change adds a `spentby` field to the json response, which lists the transaction's children in the mempool.
    
      Currently the only way to find child transactions is to use `getrawmempool` or make another call to `getmempooldescendants` and search the response for transactions that list the parent_txid in the `depends` list, which is inefficient.
    
      This change allows direct lookup of children.
    
      Example Output
      ```
        "9a9b5733c0d89f207908cfa3fe17809bee71f629aa095c9f8754524e29e98ba4": {
          ...other geterawmempool data...
          "wtxid": "9a9b5733c0d89f207908cfa3fe17809bee71f629aa095c9f8754524e29e98ba4",
          "depends": [
            "bdd92851d5766a42aeb62af667bb422a116cab4e032bba5e3dd6efe5b4b40aa0"
          ],
          "spentby": [
            "dc5d3ec388a9121421208738a041ac30a22163bc2e17758f2275b6c51a15ba7b"
          ]
        },
      ```
    
    Tree-SHA512: 83da7d421c9799a40ef65af3b7fdb586d6d87385f3f2ede3afd2c311725444b858f9d91cc110422a0fa31905779934fee07211ca6fe6b746792b83692c94b3ce

commit bf3353de90598f08a68d966c50b57ceaeb5b5d96
Merge: 07090c533 90ba2df11
Author: Jonas Schnelli <dev@jonasschnelli.ch>
Date:   Sun Feb 25 09:05:34 2018 +0800

    Merge #12287: Optimise lock behaviour for GuessVerificationProgress()
    
    90ba2df11 Fix missing cs_main lock for GuessVerificationProgress() (Jonas Schnelli)
    
    Pull request description:
    
      `GuessVerificationProgress()` needs `cs_main` due to accessing the `pindex->nChainTx`.
      This adds a `AssertLockHeld` in `GuessVerificationProgress()` and adds the missing locks in...
      * `LoadChainTip()`
      * `ScanForWalletTransactions()` (got missed in #11281)
      * GUI, `ClientModel::getVerificationProgress()` <--- **this may have GUI performance impacts**, but could be relaxed later with a cache or something more efficient.
    
    Tree-SHA512: 13302946571422375f32af8e396b9d2c1180f2693ea363aeba9e98c8266ddec64fe7862bfdcbb5a93a4b12165a61eec1e51e4e7d7a8515fa50879095dc163412

commit 961901f77e55aa07d5048000d57bcd218ae74b08
Merge: 39ae41389 864cd2787
Author: Wladimir J. van der Laan <laanwj@gmail.com>
Date:   Wed Sep 6 22:21:39 2017 +0200

    Merge #11117: Prepare for non-Base58 addresses
    
    864cd2787 Move CBitcoinAddress to base58.cpp (Pieter Wuille)
    5c8ff0d44 Introduce wrappers around CBitcoinAddress (Pieter Wuille)
    
    Pull request description:
    
      This patch removes the need for the intermediary Base58 type `CBitcoinAddress`, by providing {`Encode`,`Decode`,`IsValid`}`Destination` functions that directly operate on the conversion between `std::string`s and `CTxDestination`.
    
      As a side, it also fixes a number of indentation issues, and removes probably several unnecessary implicit `CTxDestination`<->`CBitcoinAddress` conversions.
    
      This change is far from complete. In follow-ups I'd like to:
      * Split off the specific address and key encoding logic from base58.h, and move it to a address.h or so.
      * Replace `CTxDestination` with a non-`boost::variant` version (which can be more efficient as `boost::variant` allocates everything on the heap, and remove the need for `boost::get<...>` and `IsValidDestination` calls everywhere).
      * Do the same for `CBitcoinSecret`, `CBitcoinExtKey`, and `CBitcoinExtPubKey`.
    
      However, I've tried to keep this patch to be minimally invasive, but still enough to support non-Base58 addresses. Perhaps a smaller patch is possible to hack Bech32 support into `CBitcoinAddress`, but I would consider that a move in the wrong direction.
    
    Tree-SHA512: c2c77ffb57caeadf2429b1c2562ce60e8c7be8aa9f8e51b591f354b6b441162625b2efe14c023a1ae485cf2ed417263afa35c892891dfaa7844e7fbabccab85e

commit 66270a416edb1610f276124483feceef9cba93ff
Merge: db825d293 18bacec6c
Author: Pieter Wuille <pieter.wuille@gmail.com>
Date:   Fri Jul 14 11:54:09 2017 -0700

    Merge #10557: Make check to distinguish between orphan txs and old txs more efficient.
    
    18bacec6c Make check to distinguish between orphan txs and old txs more efficient. (Alex Morcos)
    
    Tree-SHA512: b6b4bad89aa561975dce7b68b2fdad5623af5ebcb9c38fd6a72b5f6d0544ed441df4865591ac018f7ae0df9b5c60820cb4d9e55664f5667c9268458df70fd554

commit 18bacec6c2c8493fd6b7011778446b3c7473bb25
Author: Alex Morcos <morcos@chaincode.com>
Date:   Thu Jun 8 10:41:19 2017 -0400

    Make check to distinguish between orphan txs and old txs more efficient.
    
    Checking for the existence in the CCoinsViewCache of the outputs of a new tx
    will result in a disk hit for every output since they will not be found.  On the
    other hand if those outputs exist already, then the inputs must also have been
    missing, so we can move this check inside the input existence check so in the
    common case of a new tx it doesn't need to run.
    
    The purpose of the check is to avoid spamming the orphanMap with slightly old
    txs which we have already seen in a block, but it is already only optimistic
    (depending on the outputs not being spent), so make it even more efficient by
    only checking the cache and not the entire pcoinsTip.

commit cf44e4ca7762742c6c3154447b40869ec9d041db
Author: Pieter Wuille <pieter.wuille@gmail.com>
Date:   Fri Jun 9 19:24:30 2017 -0700

    Squashed 'src/leveldb/' changes from a31c8aa40..196962ff0
    
    196962ff0 Add AcceleratedCRC32C to port_win.h
    1bdf1c34c Merge upstream LevelDB v1.20
    d31721eb0 Merge #17: Fixed file sharing errors
    fecd44902 Fixed file sharing error in Win32Env::GetFileSize(), Win32SequentialFile::_Init(), Win32RandomAccessFile::_Init() Fixed error checking in Win32SequentialFile::_Init()
    5b7510f1b Merge #14: Merge upstream LevelDB 1.19
    0d969fd57 Merge #16: [LevelDB] Do no crash if filesystem can't fsync
    c8c029b5b [LevelDB] Do no crash if filesystem can't fsync
    a53934a3a Increase leveldb version to 1.20.
    f3f139737 Separate Env tests from PosixEnv tests.
    eb4f0972f leveldb: Fix compilation warnings in port_posix_sse.cc on x86 (32-bit).
    d0883b600 Fixed path to doc file: index.md.
    7fa20948d Convert documentation to markdown.
    ea175e28f Implement support for Intel crc32 instruction (SSE 4.2)
    95cd743e5 Including <limits> for std::numeric_limits.
    646c3588d Limit the number of read-only files the POSIX Env will have open.
    d40bc3fa5 Merge #13: Typo
    ebbd772d3 Typo
    a2fb086d0 Add option for max file size. The currend hard-coded value of 2M is inefficient in colossus.
    
    git-subtree-dir: src/leveldb
    git-subtree-split: 196962ff01c39b4705d8117df5c3f8c205349950

commit e484652fc36ef7135cf08ad380ea7142b6cbadc0
Author: Pieter Wuille <pieter.wuille@gmail.com>
Date:   Tue Apr 25 11:29:14 2017 -0700

    Introduce CHashVerifier to hash read data
    
    This is necessary later, when we drop the nVersion field from the undo
    data. At that point deserializing and reserializing the data won't
    roundtrip anymore, and thus that approach can't be used to verify
    checksums anymore.
    
    With this CHashVerifier approach, we can deserialize while hashing the
    exact serialized form that was used. This is both more efficient and
    more correct in that case.

commit 657e05ab2e87ff725723fe8a375fc3f8aad02126
Author: Pieter Wuille <pieter.wuille@gmail.com>
Date:   Fri Oct 28 16:51:33 2016 -0700

    Make GetSerializeSize a wrapper on top of CSizeComputer
    
    Given that in default GetSerializeSize implementations created by
    ADD_SERIALIZE_METHODS we're already using CSizeComputer(), get rid
    of the specialized GetSerializeSize methods everywhere, and just use
    CSizeComputer. This removes a lot of code which isn't actually used
    anywhere.
    
    For CCompactSize and CVarInt this actually removes a more efficient
    size computing algorithm, which is brought back in a later commit.

commit f17032f703288d43a76cffe8fa89b87ade9e3074
Merge: fbd84788e 1953c40aa
Author: Wladimir J. van der Laan <laanwj@gmail.com>
Date:   Mon May 9 08:31:14 2016 +0200

    Merge #7934: Improve rolling bloom filter performance and benchmark
    
    1953c40 More efficient bitsliced rolling Bloom filter (Pieter Wuille)
    aa62b68 Benchmark rolling bloom filter (Pieter Wuille)

commit 1953c40aa9589a03035fd294f3ba3549374a4826
Author: Pieter Wuille <pieter.wuille@gmail.com>
Date:   Sun Apr 24 18:37:29 2016 +0200

    More efficient bitsliced rolling Bloom filter
    
    This patch changes the implementation from one that stores 16 2-bit integers
    in one uint32_t's, to one that stores the first bit of 64 2-bit integers in
    one uint64_t and the second bit in another. This allows for 450x faster
    refreshing and 2.2x faster average speed.

commit be6d5a617d297bbbabcc56730976f9f025892e56
Merge: 2cd004b12 d11fc1695
Author: Wladimir J. van der Laan <laanwj@gmail.com>
Date:   Wed Jan 13 15:47:38 2016 +0100

    Merge pull request #7312
    
    d11fc16 [Wallet] Call notification signal when a transaction is abandoned (Jonas Schnelli)
    df0e222 Add RPC test for abandoned and conflicted transactions. (Alex Morcos)
    01e06d1 Add new rpc call: abandontransaction (Alex Morcos)
    9e69717 Make wallet descendant searching more efficient (Alex Morcos)

commit 9e697172542e2b01517e4025df2c23d0ed5447f4
Author: Alex Morcos <morcos@chaincode.com>
Date:   Thu Jan 7 16:31:12 2016 -0500

    Make wallet descendant searching more efficient

commit 54a550bef8a8f92b86af318962f8a75bbdef2c4a
Merge: 884367662 086ee67d8
Author: Wladimir J. van der Laan <laanwj@gmail.com>
Date:   Thu Dec 3 13:35:55 2015 +0100

    Merge pull request #7113
    
    086ee67 Switch to a more efficient rolling Bloom filter (Pieter Wuille)

commit 086ee67d839b33bf475177f680fcc848a0625266
Author: Pieter Wuille <pieter.wuille@gmail.com>
Date:   Fri Nov 27 13:20:29 2015 +0100

    Switch to a more efficient rolling Bloom filter
    
    For each 'bit' in the filter we really maintain 2 bits, which store either:
    0: not set
    1-3: set in generation N
    
    After (nElements / 2) insertions, we switch to a new generation, and wipe
    entries which already had the new generation number, effectively switching
    from the last 1.5 * nElements set to the last 1.0 * nElements set.
    
    This is 25% more space efficient than the previous implementation, and can
    (at peak) store 1.5 times the requested amount of history (though only
    1.0 times the requested history is guaranteed).
    
    The existing unit tests should be sufficient.

commit eb6172a8ca7e0474457c1206c9907514348243ea
Merge: 54e8bfec8 69d373ff6
Author: Wladimir J. van der Laan <laanwj@gmail.com>
Date:   Thu Nov 12 17:37:42 2015 +0100

    Merge pull request #6918
    
    69d373f Don't wipe the sigcache in TestBlockValidity (Pieter Wuille)
    0b9e9dc Evict sigcache entries that are seen in a block (Pieter Wuille)
    830e3f3 Make sigcache faster and more efficient (Pieter Wuille)

commit 830e3f3d027ba5c8121eed0f6a9ce99961352572
Author: Pieter Wuille <pieter.wuille@gmail.com>
Date:   Fri Oct 30 23:14:38 2015 +0100

    Make sigcache faster and more efficient

commit a56054be650052361e8de79f0f03a56a043759e5
Author: Pieter Wuille <pieter.wuille@gmail.com>
Date:   Wed Apr 22 14:28:26 2015 -0700

    Update key.cpp to use new libsecp256k1
    
    libsecp256k1's API changed, so update key.cpp to use it.
    
    Libsecp256k1 now has explicit context objects, which makes it completely thread-safe.
    In turn, keep an explicit context object in key.cpp, which is explicitly initialized
    destroyed. This is not really pretty now, but it's more efficient than the static
    initialized object in key.cpp (which made for example bitcoin-tx slow, as for most of
    its calls, libsecp256k1 wasn't actually needed).
    
    This also brings in the new blinding support in libsecp256k1. By passing in a random
    seed, temporary variables during the elliptic curve computations are altered, in such
    a way that if an attacker does not know the blind, observing the internal operations
    leaks less information about the keys used. This was implemented by Greg Maxwell.

commit e6b343d880f50d52390c5af8623afa15fcbc65a2
Author: Pieter Wuille <pieter.wuille@gmail.com>
Date:   Wed Mar 18 09:31:49 2015 -0700

    Make addrman's bucket placement deterministic.
    
    Give each address a single fixed location in the new and tried tables,
    which become simple fixed-size arrays instead of sets and vectors.
    
    This prevents attackers from having an advantages by inserting an
    address multiple times.
    
    This change was suggested as Countermeasure 1 in
    Eclipse Attacks on Bitcoin’s Peer-to-Peer Network, Ethan Heilman,
    Alison Kendler, Aviv Zohar, Sharon Goldberg. ePrint Archive Report
    2015/263. March 2015.
    
    It is also more efficient.

commit 584a358997e52a87e8c5402269c7fb3784ed2065
Author: Pieter Wuille <pieter.wuille@gmail.com>
Date:   Tue Sep 16 00:30:05 2014 +0200

    Do merkle root and txid duplicates check simultaneously
    
    Move the txid duplicates check into BuildMerkleTree, where it can be done
    much more efficiently (without needing to build a full txid set to detect
    duplicates).
    
    The previous version (using the std::set<uint256> to detect duplicates) was
    also slightly too weak. A block mined with actual duplicate transactions
    (which is invalid, due to the inputs of the duplicated transactions being
    seen as double spends) would trigger the duplicates logic, resulting in the
    block not being stored on disk, and rerequested. This change fixes that by
    only triggering in the case of duplicated transactions that can actually
    result in an identical merkle root.

commit 629d75faac84bc0a00533d01dd291a4e6394a51f
Author: Pieter Wuille <pieter.wuille@gmail.com>
Date:   Tue Sep 2 21:21:15 2014 +0200

    Combine CCoinsViewCache's HaveCoins and const GetCoins into AccessCoins.
    
    The efficient version of CCoinsViewCache::GetCoins only works for known-to-exist
    cache entries, requiring a separate HaveCoins call beforehand. This is
    inefficient as both perform a hashtable lookup.
    
    Replace the non-mutable GetCoins with AccessCoins, which returns a potentially-NULL
    pointer. This also decreases the overloading of GetCoins.
    
    Also replace some copying (inefficient) GetCoins calls with equivalent AccessCoins,
    decreasing the copying.

commit dd638dd712861a2fc419fe9b2b064ae303b074e6
Author: Wladimir J. van der Laan <laanwj@gmail.com>
Date:   Wed Jun 25 13:45:29 2014 +0200

    typedef std::map<uint256, CCoins> to CCoinsMap
    
    This makes it possible to switch to a more efficient map type
    without changing all occurences manually.
    
    Merges half of #4413.

commit e4daecda0bcd47a2672eb625232f00e388a3cd87
Author: Pieter Wuille <pieter.wuille@gmail.com>
Date:   Sat Oct 12 15:18:08 2013 +0200

    Reimplement CBlockLocator's chain-related logic in CChain.
    
    This removes a few unused CBlockLocator methods, and moves the
    construction and fork-finding logic to CChain (which can do these
    more efficiently, as it has a height-indexable chain available).
    It also makes CBlockLocator independent from the validation code.

commit 607dbfdeaf7ec053d959c47c125d60c0b7e7216a
Author: Jeff Garzik <jgarzik@exmulti.com>
Date:   Thu Nov 15 19:41:12 2012 -0500

    P2P: parse network datastream into header/data components in socket thread
    
    Replaces CNode::vRecv buffer with a vector of CNetMessage's.  This simplifies
    ProcessMessages() and eliminates several redundant data copies.
    
    Overview:
    
    * socket thread now parses incoming message datastream into
      header/data components, as encapsulated by CNetMessage
    * socket thread adds each CNetMessage to a vector inside CNode
    * message thread (ProcessMessages) iterates through CNode's CNetMessage vector
    
    Message parsing is made more strict:
    
    * Socket is disconnected, if message larger than MAX_SIZE
      or if CMessageHeader deserialization fails (latter is impossible?).
      Previously, code would simply eat garbage data all day long.
    * Socket is disconnected, if we fail to find pchMessageStart.
      We do not search through garbage, to find pchMessageStart.  Each
      message must begin precisely after the last message ends.
    
    ProcessMessages() always processes a complete message, and is more efficient:
    
    * buffer is always precisely sized, using CDataStream::resize(),
      rather than progressively sized in 64k chunks.  More efficient
      for large messages like "block".
    * whole-buffer memory copy eliminated (vRecv -> vMsg)
    * other buffer-shifting memory copies eliminated (vRecv.insert, vRecv.erase)

commit 4fea06db25108e7f72710bf22c3d1896707eeb74
Author: Pieter Wuille <pieter.wuille@gmail.com>
Date:   Fri Aug 10 15:13:57 2012 +0200

    Automatically reorganize at startup to best known block
    
    Given that the block tree database (chain.dat) and the active chain
    database (coins.dat) are entirely separate now, it becomes legal to
    swap one with another instance without affecting the other.
    
    This commit introduces a check in the startup code that detects the
    presence of a better chain in chain.dat that has not been activated
    yet, and does so efficiently (in batch, while reusing the blk???.dat
    files).

commit bba89aa82a80f0373dcb7288d96d5b0fcb453d73
Author: Pieter Wuille <pieter.wuille@gmail.com>
Date:   Thu Aug 16 02:21:28 2012 +0200

    Pre-allocate block and undo files in chunks
    
    Introduce a AllocateFileRange() function in util, which wipes or
    at least allocates a given range of a file. It can be overriden
    by more efficient OS-dependent versions if necessary.
    
    Block and undo files are now allocated in chunks of 16 and 1 MiB,
    respectively.

commit 69fc8047a9a96bcf5360f810c796049c27e16fcd
Author: Pieter Wuille <pieter.wuille@gmail.com>
Date:   Fri Jun 15 18:52:19 2012 +0200

    Compact serialization for scripts
    
    Special serializers for script which detect common cases and encode
    them much more efficiently. 3 special cases are defined:
    * Pay to pubkey hash (encoded as 21 bytes)
    * Pay to script hash (encoded as 21 bytes)
    * Pay to pubkey starting with 0x02, 0x03 or 0x04 (encoded as 33 bytes)
    
    Other scripts up to 121 bytes require 1 byte + script length. Above
    that, scripts up to 16505 bytes require 2 bytes + script length.

commit 4b603f1cd6a0b8480c15555389077a4b401c2c7b
Author: Pieter Wuille <pieter.wuille@gmail.com>
Date:   Tue Sep 20 15:38:29 2011 +0200

    Inline base64 encoder/decoder
    
    This replaces the openssl-based base64 encoder and decoder with a more
    efficient internal one. Tested against the rfc4648 test vectors.
    
    Decoder is based on JoelKatz' version.

commit 683bcb9154422011ef01e8c5677bad2c4b323436
Author: s_nakamoto <s_nakamoto@1a98c847-1fd6-4fd8-948a-caf3550aa51b>
Date:   Fri Nov 19 20:22:46 2010 +0000

    efficiently sort transaction dependencies in one pass
    
    git-svn-id: https://bitcoin.svn.sourceforge.net/svnroot/bitcoin/trunk@184 1a98c847-1fd6-4fd8-948a-caf3550aa51b
